{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nimport math\nimport random\nfrom vexcode_vr import *\n\n# Brain should be defined by default\nbrain=Brain()\n\ndrivetrain = Drivetrain(\"drivetrain\", 0)\npen = Pen(\"pen\", 8)\npen.set_pen_width(THIN)\nleft_bumper = Bumper(\"leftBumper\", 2)\nright_bumper = Bumper(\"rightBumper\", 3)\nfront_eye = EyeSensor(\"frontEye\", 4)\ndown_eye = EyeSensor(\"downEye\", 5)\nfront_distance = Distance(\"frontdistance\", 6)\ndistance = front_distance\nmagnet = Electromagnet(\"magnet\", 7)\nlocation = Location(\"location\", 9)\n\n#endregion VEXcode Generated Robot Configuration\n\nimport enum from Enum\n\nclass Direction(enum):\n    NORTH = 0\n    EAST = 1\n    SOUTH = 2\n    WEST = 3\n\nclass Position:\n    x = 0\n    y = 0\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass AvailableDirections:\n    North = True\n    East = True\n    South = True\n    West = True\n\nclass TurtleInfo:\n    currentDirection = Direction.NORTH\n\n\nturtle = TurtleInfo()\n\ninternalBoard = []\nboardWidth = 8\nboardHeight = 8\n\nstartPos = Position(4, 7) #X, Y\nendPos = Position(3, 0)\ncurrentRoute = [] #List of positions\n\ndef GenerateBoard():\n    global internalBoard, boardWidth, boardHeight\n\n    for y in range(boardHeight):\n        internalBoard.append([])\n        for _ in range(boardWidth):\n            internalBoard[y].append(AvailableDirections())\n\ndef GetNextPosition():\n    global currentFastestRoute\n\n    return currentFastestRoute.pop(0)\n\ndef GetNextInstruction\n\n\ndef Main():\n    global internalBoard\n\n    GenerateBoard()\n    for y in internalBoard:\n        brain.new_line()\n        for x in y:\n            brain.print(x.North)\n        \n\n\n\nbrain.clear()\nvr_thread(Main)\n","textLanguage":"python","robotConfig":[],"slot":0,"platform":"PG","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","minVersion":"3.0.0","fileFormat":"2.0.0","targetBrainGen":"First","v5SoundsEnabled":false,"playground":"DynamicWallMaze","robotModel":"vr"}